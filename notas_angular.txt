ng new <nombre> -- para crear nuevo proyecto de angular

ng serve -o -- para correr servidor

"CTRL + C" -- para terminar o detener el servidor

**COMPONENTES DE ANGULAR**
están definidos en app.component.ts, ahí se asigna el selector que es el nombre con el que se llama en el archivo .html principal, templateUrl que es donde se estructura el componente en html y styleUrls que es de donde se sacan los estilos 

podemos crear atributos en app.component.ts que posteriormente se utilicen en el app.component.html, como el titulo que se declara title = 'text'; y luego se utiliza en app.component.html como {{title}} y lo sustituye en la página por el valor asignado

cuando creemos un componente, es necesario listarlo en el archivo app.module.ts, primero importandolo arriba, luego en declarations poner el mismo nombre.

*RECOMENDACIONES AL CREAR COMPONENTES*
es recomendable crear componentes con todos sus archivos en una sola carpeta y seguir la nomenclatura que tienen, poner <nombre>.component.ts y las otras extensiones también como html, .spec.ts y .css 

**RECREACIÓN DE NODE_MODULES**
se escribe 'npm install' en la carpeta del proyecto

AppModule es un archivo de ts que es con el que inicia la aplicación, en este se encuentran cosas como los decoradores los cuales se usan para agregar características adicionales a la definición de AppModule, ejemplos de estas características son las declaraciones, imports, providers y bootstrap entre más.

En el caso para levantar la aplicación se utiliza bootstrap el cual usa a AppComponent, el mismo que se encuentra en la carpeta app, al tratar de direccionarnos a este nos mandará al archivo app.component.ts

**DECORADORES**

los decoradores están en los archivos ts, estos siempre tienen un '@' antes de su respectivo nombre

**INSTALACIÓN DE BOOTSTRAP EN EL PROYECTO**

para instalar bootstrap en el proyecto, abrimos una terminal en el directorio y escribimos npm i bootstrap --save 
luego iremos al archivo angular.json y en el apartado de styles escribimos la ruta, en este caso es "node_modules/bootstrap/dist/css/bootstrap.min.css"
en el apartado de scripts añadimos lo siguiente:"node_modules/jquery/dist/jquery.slim.min.js",
                                                "node_modules/@popperjs/dist/umd/popper.min.js",
                                                "node_modules/bootstrap/dist/js/bootstrap.min.js"

**TEMPLATE REFERENCE VARIABLE**
se puede utilizar interpolación también para guardar valores, en el ejemplo se muestra que en un input que tiene el nombre 'input' se utiliza interpolación para guardar lo que se escriba, el nombre de la variable es el mismo que lo escrito dentro como nombre del input

**PROPERTY BINDING** 
al momento de agregar una propiedad a un objeto de html entre corchetes, se le da a entender a angular que nosotros le asignaremos un valor de alguna forma, en este caso, se utiliza la variable en nuestro archivo ts para darle el valor.

**EVENT BINDING**
al momento de agregar un evento a un elemento de html, se tiene que hacer entre paréntesis para que siga la sintáxis de Angular, a los eventos se les tiene que asignar un método después para que sea lo que se realice al ejecutarlo, el método se define en el archivo typescript del componente

para capturar datos de un input utilizando event binding, es necesario poner entre paréntesis el tipo de evento que será y el método que se ejecutará al momento de realizarlo y se pasa la variable como argumento en la que se guardará el valor, el método modificarTitulo recibe un elemento de tipo event, por medio de este podemos acceder al valor que se escribió en el componente que tiene el evento de input, en nuestro caso es event.target pero es necesario realizar un casteo a HTMLInputElement


**TWO-WAY BINDING**
two-way binding es una forma de comunicar los componentes para enviar información a la clase de angular a la plantilla html del componente.
para esto es necesario utilizar el [(ngModel)] en los componentes de html y funcionará de la misma manera que si es un evento de input y se guardará en lo que esté después del '='

**ngIf Y elseBlock**
en angular se pueden mostrar componentes si se cumplen condiciones especificadas que siempre sean de valor booleano. Se utiliza *ngIf dentro del elemento html y posteriormente dentro de comillas algo que retorne un valor booleano

**ngFor**
nos permite mostrar arreglos de objetos o cualquier cosa que pueda ser iterada para esto utilizamos *ngFor="", dentro de las comillas va un let que nos permite iterar dentro de la colección y se puede utilizar interpolación para ir mostrando cada objeto

**@Input()**
Este decorador nos permite recibir información del componente padre, este se pone en variables dentro del component.ts del componente hijo, un ejemplo sería @Input() usuario: Usuario; que recibe una variable de tipo Usuario y la llama usuario, este valor es asignado al llamar al componente hijo desde el padre, por ejemplo, si se tiene un *ngFor y se manda un arreglo de Usuarios, cada uno de estos tomará lugar en usuario del componente hijo

**@Output()**
Este decorador se usa para enviar datos de un componente hijo al componente padre, es necesario crear una variable new EventEmitter<tipodato>() para poder enviar los datos
para enviar los datos es necesario usar .emit(variableamandar) 

"strictPropertyInitialization": false en tsconfig.json para que la inicialización de las variables no sea obligatoria

**Referencias locales**
Las referencias locales se utilizan de la siguiente forma:
1. Se le da un nombre a los input con #, por ejemplo, #nombreInput
2. En el elemento que vaya a mandar la información, en el evento click que llama a la función, se agregarán los nombres como parámetrofa
3. En el archivo typescript, los parámetros se reciben como tipo HTMLInpuitElement y se utiliza la propiedad .value de los elementos recibidos

**@ViewChild**
Lo que nos permite el decorador ViewChild es obtener datos del documento HTML en base a el nombre que tenga asignado, por ejemplo si tenemos un elemento con el nombre #numeroInput, tenemos que declarar @ViewChild('numeroInput') <nombredevariable>: ElementRef; y se estaría recibiendo el valor ahí.
Para obtener el valor de un elemento de este tipo se utilizará .nativeElement.value

**Service // Servicio**
Un servicio está definido por una clase de typescript pero esta es utilizada por varios componentes y nos ayuda a compartir información, basicamente son métodos, lo común de un servicio es que provea información que viene de una fuente de datos ya sea dinámica o estática
Los servicios se inyectan a través del constructor de los otros componentes que lo utilicen en su respectivo archivo .component.ts, también, en  @Component es necesario agregarlos como providers.
Si queremos que el servicio pueda ser utilizado en todos los componentes, lo podemos importar en el archivo app.module.ts.

**Inyección de un servicio en otro servicio**
Para poder inyectar un servicio en otro servicio es necesario poner el decorador @Injectable antes de la declaración de la clase en la que se usará o inyectará el otro servicio.

**Comunicar componentes por medio de un servicio**
Para lograr esto es necesario utilizar un EventEmitter en el servicio que nos ayudará a compartir la información, se crea un EventEmitter del tipo que sea, luego, en el componente que emitirá la información es necesario utilizar un método o algo que dispare esto, por ejemplo, en un botón se usa el método emitirSaludo que le dirá al EventEmitter de nuestro servicio qué emitir, en nuestro caso, un valor númerico que es el índice de registro, luego, en el otro componente dentro de su constructor suscribimos al componente al EventEmitter, ejemplo: this.usuariosSerive.saludar.subscribe() y dentro de paréntesis va la acción que queremos que se realice al momento de que se emita el evento, en nuestro caso es una función de flecha que alerta el número del índice.

**Pipes**
Un pipe nos permite dar formatos a los datos que se muestran

**[ngClass]**
nos ayuda a cambiar la clase css en caso de que una condicion sea verdadera

**(ngSubmit)** 
nos permite realizar una acción desde un formulario que al momento de añadir información a un formulario se ejecute una función

**ngForm**
nos permite validar el formularo por ejemplo, si se declara la referencia local #f="ngForm" se puede valir dentro de (ngSubmit) ="f.form.valid" para validar que esté completo

**Routing**
para generar el módulo de routing de forma manual se uitiliza ng g module <nombre-del-modulo> y se generará.
Es necesario agregar el approutingmodule a los imports del app.module.ts de la aplicación.

Las rutas se definen en el archivo de routing, primero hay que importar el RouterModule.forRoot(<constante de las rutas>) y exportar el RotuerModule dentro de NgModule, luego se define la constante de rutas que tiene paths y el componente que se mostrará.



**BOOTSTRAP**
para generar forms de una columna podemos crear un div con la clase form-row 
para generar un form group de solo dos columnas añadimos las clases form-group y col-md-2 a un contenedor
FORM-GROUP Y FORM-ROW YA NO SIRVEN, UTILIZAR ROW
sr-only ya no sirve, utilizar visually-hidden